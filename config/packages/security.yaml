security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                # by default, the feature is enabled by checking a checkbox in the
                # login form, uncomment the following line to always enable it.
                #always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Admin panel general access
        - { path: ^/admin, roles: ROLE_ADMIN }

        # Course administration
        - { path: ^/admin/course/new, roles: ROLE_ADMIN }
        - { path: ^/admin/course/edit, roles: ROLE_ADMIN }
        - { path: ^/admin/course/delete, roles: ROLE_ADMIN }
        - { path: ^/admin/course/show, roles: ROLE_ADMIN }

        # Course category administration
        - { path: ^/admin/course/category/new, roles: ROLE_ADMIN }
        - { path: ^/admin/course/category/edit, roles: ROLE_ADMIN }
        - { path: ^/admin/course/category/delete, roles: ROLE_ADMIN }

        # Resource administration
        - { path: ^/admin/resource/new, roles: ROLE_ADMIN }
        - { path: ^/admin/resource/edit, roles: ROLE_ADMIN }
        - { path: ^/admin/resource/delete, roles: ROLE_ADMIN }
        - { path: ^/admin/resource/show, roles: ROLE_ADMIN }

        # Post category administration
        - { path: ^/admin/resource/category/new, roles: ROLE_ADMIN }
        - { path: ^/admin/resource/category/edit, roles: ROLE_ADMIN }
        - { path: ^/admin/resource/category/delete, roles: ROLE_ADMIN }

        # Access control for InfoUser administration
        - { path: ^/admin/info-user/new, roles: ROLE_ADMIN }
        - { path: ^/admin/info-user/edit, roles: ROLE_ADMIN }
        - { path: ^/admin/info-user/delete, roles: ROLE_ADMIN }
        - { path: ^/admin/info-user/show, roles: ROLE_ADMIN }
        - { path: ^/admin/info-user, roles: ROLE_ADMIN }

        # Access control for InfoUser frontend (user profile)
        - { path: ^/profile/new, roles: ROLE_USER }
        - { path: ^/profile/edit, roles: ROLE_USER }
        - { path: ^/profile/delete, roles: ROLE_USER }
        - { path: ^/profile/show, roles: ROLE_USER }
        - { path: ^/profile, roles: ROLE_USER }

        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
